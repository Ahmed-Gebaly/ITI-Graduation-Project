#==================================== Servers Pre-configuration =========================================
- name: setting hosts file on all servers
  hosts: all
  tags: pre-config
  tasks:

   - name: setting hosts file
     template:
      src: hosts.j2
      dest: /etc/hosts
     tags: all

   - name: setting hostnames of all servers
     hostname:
      name:   "{{ inventory_hostname }}"

#===================================== Application Servers Configuration =======================================
- name: wordpress 
  hosts: apps
  tags: app-server
  tasks:

   - name: Adding repository of Glusterfs
     apt_repository:
      repo: 'ppa:gluster/glusterfs-7'
      state: present
      update_cache: true
     tags:
      - gluster

   - name: install apache,php modules,libraries and updating apt
     apt:
      name: "{{item}}"
      state: latest
      update_cache: yes
     loop:
      - apache2
      - unzip  
      - php
      - php-mysql
      - libapache2-mod-php
      - glusterfs-server
     tags:
      - wordpress
      - gluster
     
   - name: Enable and start  service apache2, ufw, and glusterd 
     service:
      name: "{{item}}"
      enabled: yes
      state: started
     loop:
      - apache2
      - ufw
      - glusterd
     tags:
      - wordpressa
      - gluster

   - name: Allow ports 22, 3306, 80, 443
     ufw:
      rule: allow
      state: enabled
      port: "{{ item }}"
     loop:
      - 22
      - 3306
      - 80
      - 443
      - 24007
     tags:
      - wordpress
      - gluster

   - name: peering the nodes
     command: gluster peer probe node2.app1.project.com
     when: inventory_hostname == 'node1.app1.project.com'
     tags:
      - gluster

   - name: peering the nodes
     command: gluster peer probe node1.app1.project.com
     when: inventory_hostname == 'node2.app1.project.com'
     tags:
      - gluster

   - name: Glusterfs configurations
     gluster_volume:
      state: present
      name: gv0
      bricks: /mnt/gv0
      replicas: 2
      cluster:
       - node1.app1.project.com
       - node2.app1.project.com
      force: true
     run_once: true
     tags:
      - cluster1

   - name: Mount and bind a volume
     mount:
      path: /var/www/html
      src: "{{ inventory_hostname }}:/gv0"
      opts: "defaults,_netdev"
      state: mounted
      fstype: glusterfs
     tags:
      - cluster1

   - name: Extract wordpress into /var/www/
     unarchive:
      src: https://wordpress.org/latest.zip
      dest: /var/www/
      remote_src: yes
     tags:
      - wordpress

   - name: Create a directory if it does not exist
     file:
      path: /var/www/wordpress
      state: directory
      owner: www-data
      group: www-data
      mode: 0755
      recurse: yes
     tags:
      - wordpress

   - name: Renaming wp-config
     command: mv /var/www/wordpress/wp-config-sample.php /var/www/wordpress/wp-config.php
     tags:
      - wordpress

   - name: configuring wp-config.php
     template:
      src: temp.j2
      dest: /var/www/wordpress/wp-config.php
      owner: www-data
      group: www-data
      mode: 0755
     tags:
      - wordpress

   - name: configuring apache
     template:
      src: apache.j2
      dest: /etc/apache2/sites-available/domain.com.conf
     tags:
      - wordpress

   - name: Enablsding the virtual host
     command:  "{{item}}"
     loop:
     - a2ensite domain.com.conf
     - a2dissite 000-default.conf
     - systemctl restart apache2
     tags:
      - wordpress

#================================ Loadbalacer ============================================
- name: Loadbalancer Configuration
  hosts: lb
  tags: load-balancer 
  tasks:

   - name: installing epel-release
     yum:
      name: epel-release
      state: latest

   - name: installing nginx
     yum:
      name: "{{item}}"
      enablerepo: "epel"
      state: latest
     loop:
      - firewalld
      - openssl
      - python-pip  
      - nginx
     tags:
      - lb		

   - name: Ensure python OpenSSL dependencies are installed.
     pip:
      name: pyOpenSSL
      state: present
     tags:
      - lb

   - name: create /etc/ssl/private directory
     file:
      path: /etc/ssl/private
      state: directory
     tags:
      - lb

   - name: create certificate directory
     file:
      path: /etc/ssl/certs
      state: directory
     tags:
      - lb

   - name: Generate an OpenSSL private key.
     openssl_privatekey:
      path: /etc/ssl/private/ansible.com.pem
     tags:
      - lb

   - name: Generate an OpenSSL Certificate Signing Request
     openssl_csr:
      path: /etc/ssl/certs/www.ansible.com.csr
      privatekey_path: /etc/ssl/private/ansible.com.pem
      common_name: www.ansible.com
     tags:
      - lb

   - name: Generate a Self Signed OpenSSL certificate
     openssl_certificate:
      path: /etc/ssl/certs/ansible.com.crt
      privatekey_path:  /etc/ssl/private/ansible.com.pem
      csr_path: /etc/ssl/certs/www.ansible.com.csr
      provider: selfsigned
     tags:
      - lb

   - name: start firewalld
     service:
      name: firewalld
      state: started
      enabled: yes
     tags:
      - lb

   - name: Allow all access from RFC1918 networks to this host
     firewalld:
      port: 443/tcp
      permanent: yes
      state: enabled
      immediate: yes
     tags:
      - lb

   - name: configuring apache
     template:
      src: nginx.j2
      dest: /etc/nginx/conf.d/load.conf
     tags:
      - lb

   - name: Touch a file, using symbolic modes to set the permissions (equivalent to 0644)
     file:
      path:  /etc/nginx/conf.d/default.conf
      state: absent
     tags:
      - lb 

   - name: start nginx
     service:
      name: nginx
      state: started
      enabled: yes 
     tags:
      - lb

#=============================== Database ==================================
- name: Mysql installation
  hosts: db
  tags: database
  tasks:

   - name: Installing mysql-server
     apt:
      pkg: "{{item}}"
      update_cache: yes
      cache_valid_time: 86400
      state: present
     loop:
      - mysql-server
      - python-mysqldb
      - php-mysql
      - python
     tags:
      - db

   - name: Start mysql
     service:
      name: mysql
      state: started
      enabled: yes
     tags:
      - db

   - name: set bind-address
     lineinfile:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      regexp: '^bind-address'
      line: bind-address            = 0.0.0.0
     tags:
      - db

   - name: restart mysql and ufw
     service:
      name: "{{item}}"
      state: restarted
     loop:
      - mysql 
      - ufw
     tags:
      - db

   - name: open port 22, 3306, 80, and 443
     ufw:
      rule: allow
      state: enabled
      port: "{{ item }}"
     loop:
      - 22
      - 3306
      - 80
      - 443
     tags:
      - db

   - name: Create mysql database
     mysql_db:
      name: wordpress_db
      state: present
      login_unix_socket: /var/run/mysqld/mysqld.sock            #path to Unix domain socket for local connection
     tags:
      - db

   - name: Create mysql user
     mysql_user:
      name: wordpress_user
      password: 12345678
      priv: '*.*:ALL'
      host: "{{item}}"
     loop:
      - localhost
      - node1.app1.project.com
      - node2.app1.project.com
     tags:
      - db

   - name: Create nagios user
     mysql_user:
      name: nagios
      password: 123456
      priv: '*.*:ALL'

#================================== Nagios Server =======================================
- name: nagios server installation
  hosts: nagios
  tags: nagios-server
  tasks:

   - name: Create nagios group
     group:
      name: nagcmd
      state: present

   - name: Create nagios user
     user:
      name: nagios
      password: $1$2lDCWevR$SdX6VSEYKuEGXwO3JlIFe/
      groups: nagcmd
      append: yes

   - name: Add nagios to sudoers
     lineinfile:
      path: /etc/sudoers
      line: "nagios ALL=(ALL) NOPASSWD: ALL"

   - name: Put SELinux in permissive mode
     selinux:
      policy: targeted
      state: permissive

   - name: Install epel-release
     yum:
      name: epel-release
      state: latest

   - name: Install packages
     yum:
      name: "{{item}}"
      enablerepo: "epel"
      state: latest
     loop:
      - httpd
      - firewalld
      - php
      - php-mysql
      - gcc
      - glibc
      - glibc-common
      - gd
      - gd-devel
      - make
      - net-snmp
      - openssl-devel
      - xinetd
      - unzip
      - perl
      - git
      - mailx
      - python-pip

   - name: Install python dependency
     pip:
      name: passlib

   - name: Enable service httpd, and not touch the state
     service:
      name: "{{item}}"
      state: started
      enabled: yes
     loop:
      - httpd
      - firewalld

   - name: Open firewall ports
     firewalld:
      port: "{{item}}"
      permanent: yes
      state: enabled
      immediate: yes
     loop:
      - 161/tcp
      - 161/udp
      - 162/tcp
      - 162/udp
      - 80/tcp
      - 443/tcp
      - 5666/tcp
      - 22/tcp
      - 25/tcp
      - 25/udp
      - 465/tcp
      - 587/tcp

   - name: Add apache user nagcmd group
     user:
      name: apache
      groups: nagcmd

   - name: Download nagios packages from GitHub
     git:
      repo: 'https://github.com/Ahmed-Gebaly/iTi-SystemAdmin40.git'
      dest: /home/nagios/iTi-SystemAdmin40
      clone: yes
      update: yes
     become_user: nagios

   - name: Unarchive nagios packages
     unarchive:
      src: "{{item}}"
      dest: /home/nagios/
      remote_src: yes
     loop:
      - /home/nagios/iTi-SystemAdmin40/Nagios-Server-Packages/nagios-4.4.6.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Nagios-Server-Packages/nagios-plugins-2.3.3.tar.gz
      - /home/nagios/iTi-SystemAdmin40/Nagios-Server-Packages/nrpe-4.0.2.tar.gz
      - /home/nagios/iTi-SystemAdmin40/eventhandlers.tar.gz
     become_user: nagios

   - name: Install Nagios
     command: "{{item}}"
     args:
      chdir: /home/nagios/nagios-4.4.6
     loop:
      - ./configure --with-nagios-group=nagios --with-command-group=nagcmd
      - make all
     run_once: true
     become_user: nagios

   - name: Nagios make
     command: "{{item}}"
     args:
      chdir: /home/nagios/nagios-4.4.6
     loop:
      - make install
      - make install-commandmode
      - make install-init
      - make install-config
      - make install-webconf
     run_once: true

   - name: Install nagios plugins
     command: "{{item}}"
     args:
      chdir: /home/nagios/nagios-plugins-2.3.3
     loop:
      - ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl
      - make
     run_once: true
     become_user: nagios

   - name: Nagios plugin make
     command: make install
     args:
      chdir: /home/nagios/nagios-plugins-2.3.3
     run_once: true

   - name: Install NRPE
     command: "{{item}}"
     args:
      chdir: /home/nagios/nrpe-4.0.2
     loop:
      - ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagios --with-ssl=/usr/bin/openssl --with-ssl-lib=/usr/lib/x86_64-linux-gnu
      - make all
     run_once: true
     become_user: nagios

   - name: Nagios NRPE make
     command: "{{item}}"
     args:
      chdir: /home/nagios/nrpe-4.0.2
     loop:
      - make install
      - make install-inetd
     run_once: true    
 
   - name: Add nagios server to nrpe
     lineinfile:
      path: /etc/xinetd.d/nrpe
      regexp: '^    only_from       = 127.0.0.1 '
      line: "    only_from       = 127.0.0.1  {{inventory_hostname}}"

   - name: Restart xinted service
     service:
      name: xinetd
      state: restarted

   - name: Create htpasswd to Nagios Admin
     htpasswd:
      path: /usr/local/nagios/etc/htpasswd.users
      name: nagiosadmin
      password: 123456
      
   - name: Copy eventhandlers directory
     copy:
      src: /home/nagios/eventhandlers
      dest: /usr/local/nagios/libexec
      force: yes
      remote_src: yes
      owner: nagios
      group: nagios

   - name: create /usr/local/nagios/etc/servers directory
     file:
      path: /usr/local/nagios/etc/servers
      state: directory


   - name: uncomment /usr/local/nagios/etc/servers
     replace:
      path: /usr/local/nagios/etc/nagios.cfg
      regexp: '#cfg_dir=/usr/local/nagios/etc/servers'
      replace: 'cfg_dir=/usr/local/nagios/etc/servers'

   - name: comment /usr/local/nagios/etc/objects/localhost.cfg
     replace:
      path: /usr/local/nagios/etc/nagios.cfg
      regexp: 'cfg_file=/usr/local/nagios/etc/objects/localhost.cfg'
      replace: '#cfg_file=/usr/local/nagios/etc/objects/localhost.cfg'

   - name: Set Host Global Event Handler
     replace:
      path: /usr/local/nagios/etc/nagios.cfg
      regexp: '#global_host_event_handler=host_ticket=somecommand'
      replace: 'global_host_event_handler=host_ticket'

   - name: Set Service Global Event Handler
     replace:
      path: /usr/local/nagios/etc/nagios.cfg
      regexp: '^#global_service_event_handler=host_ticket=somecommand'
      replace: 'global_service_event_handler=service_ticket'
     tags: mm
   - name: uncomment eventhandlers variable
     replace:
      path: /usr/local/nagios/etc/nagios.cfg
      regexp: '^#$USER2$=/usr/local/nagios/libexec/eventhandlers$'
      replace: '$USER2$=/usr/local/nagios/libexec/eventhandlers'

   - name: node1.app1.project.com
     template:
      src: nagios-app1.cfg.j2
      dest: /usr/local/nagios/etc/servers/app1.cfg
      owner: nagios
      group: nagios
      mode: 0664
     tags: nn
   - name: node2.app1.project.com
     template:
      src: nagios-app2.cfg.j2
      dest: /usr/local/nagios/etc/servers/app2.cfg
      owner: nagios
      group: nagios
      mode: 0664
     tags: bb
   - name: db.project.com
     template:
      src: nagios-db.cfg.j2
      dest: /usr/local/nagios/etc/servers/db.cfg
      owner: nagios
      group: nagios
      mode: 0664

   - name: lb.project.com
     template:
      src: nagios-lb.cfg.j2
      dest: /usr/local/nagios/etc/servers/lb.cfg
      owner: nagios
      group: nagios
      mode: 0664

   - name: nagios.project.com
     template:
      src: nagios-nagios.cfg.j2
      dest: /usr/local/nagios/etc/servers/nagios.cfg
      owner: nagios
      group: nagios
      mode: 0664

   - name: ansible.project.com
     template:
      src: nagios-ansible.cfg.j2
      dest: /usr/local/nagios/etc/servers/ansible.cfg
      owner: nagios
      group: nagios
      mode: 0664

   - name: configuring nagios command file
     template:
      src: nagios-commands.cfg.j2
      dest: /usr/local/nagios/etc/objects/commands.cfg
      
   - name: configuring nagios contant file
     template:
      src: nagios-contacts.cfg.j2
      dest: /usr/local/nagios/etc/objects/contacts.cfg

   - name: configuring nagios templates file
     template:
      src: nagios-templates.cfg.j2
      dest: /usr/local/nagios/etc/objects/templates.cfg

   - name: Restart Nagios Services
     command: "{{item}}"
     loop:
      - systemctl daemon-reload
      - systemctl start nagios
      - systemctl enable nagios
      - systemctl restart httpd

   - name: Prepare Google SMTP mail configuration
     lineinfile:
      path: /etc/mail.rc
      line: "{{item}}"
     loop:
      - "set smtp=smtps://smtp.gmail.com:465"
      - "set smtp-auth=login"
      - "set smtp-auth-user=iti.project.2020@gmail.com"
      - "set smtp-auth-password=@itisa40"
      - "set ssl-verify=ignore"
      - "set nss-config-dir=/etc/pki/nssdb/"

#======================================== Nagios Centos Host-======================================================================

- name: nagios host playbook
  hosts: nagios_centos
  tags: nagios-centos
  tasks:
   
   - name: installing packages
     yum:
      name: epel-release
      state: latest
     tags: host

   - name: installing packages
     yum:
      name: "{{item}}"
      enablerepo: "epel"
      state: latest
     loop:
      - nrpe
      - nagios-plugins-all
      - sysstat
      - bc
      - git
     tags: host

   - name: firewall configs
     firewalld:
      port: "{{item}}"
      permanent: yes
      state: enabled
      immediate: yes
     loop:
      - 80/tcp
      - 443/tcp
      - 5666/tcp
      - 22/t     tags: host
     tags: host

#========================================== Nagios Ubuntu Host ==============================================
- name: Install Nagios on ubuntu
  hosts: nagios_ubuntu
  tags: nagios-ubuntu
  tasks:
   - name: install needed pacakges
     apt:
      name: "{{item}}"
      state: latest
      update_cache: yes
     loop:
      - nagios-plugins 
      - nagios-nrpe-server 
      - sysstat  
      - bc 
     
   - name: Allow ports
     ufw:
      rule: allow
      state: enabled
      port: 5666
     tags:
      - nagios_ubuntu
